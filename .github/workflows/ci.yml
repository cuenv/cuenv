name: ci

on:
  push:
    branches: [main]
    tags: ["*.*.*"]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  lint-and-format:
    name: lint-and-format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v20

      - name: Build development environment
        run: nix develop --accept-flake-config --command echo "Development environment ready"

      - name: Check formatting
        run: nix develop --accept-flake-config --command treefmt --fail-on-change

      - name: Run clippy
        run: nix develop --accept-flake-config --command cargo clippy --workspace --all-targets --all-features -- -D warnings

  test-suite:
    name: test-suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, 1.85.0] # MSRV - Edition 2024 requires 1.85+

    steps:
      - uses: actions/checkout@v5

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v20

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-git-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.rust }}-target-v2-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-target-v2-
            ${{ runner.os }}-target-v2-

      - name: Build development environment
        run: nix develop --accept-flake-config --command echo "Development environment ready"

      - name: Build workspace
        run: nix develop --accept-flake-config --command cargo build --workspace --all-features

      - name: Run tests
        run: nix develop --accept-flake-config --command cargo nextest run --workspace --all-features

      - name: Run doctests
        run: nix develop --accept-flake-config --command cargo test --doc --workspace

      - name: Run BDD tests
        # BDD tests use cucumber and are incompatible with nextest
        # See: https://github.com/cucumber-rs/cucumber/issues/370
        run: nix develop --accept-flake-config --command cargo test --test bdd

      # Go bridge tests disabled due to CGO issues in CI
      # - name: Test Go bridge
      #   run: nix develop --accept-flake-config --command bash -c "cd crates/cuengine && CGO_ENABLED=1 go test -v ./..."
      #   env:
      #     CGO_ENABLED: "1"

  supply-chain-security:
    name: supply-chain-security
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v5

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v20

      - name: Build development environment
        run: nix develop --accept-flake-config --command echo "Development environment ready"

      - name: Run security audit
        run: nix develop --accept-flake-config --command cargo audit

      - name: Run dependency checks
        run: nix develop --accept-flake-config --command cargo deny check bans licenses advisories

      # Generate SBOM only on Linux (primary platform)
      - name: Generate SBOM
        run: nix develop --accept-flake-config --command cargo cyclonedx --override-filename sbom.json
        if: matrix.os == 'ubuntu-latest'

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.os }}
          path: sbom.json
        if: matrix.os == 'ubuntu-latest'

  coverage:
    name: coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v20

      - name: Build development environment
        run: nix develop --accept-flake-config --command echo "Development environment ready"
        env:
          ENABLE_LLVM_COV: "1"

      - name: Generate coverage
        run: nix develop --accept-flake-config --command cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info
        env:
          ENABLE_LLVM_COV: "1"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: false # Soft gating - don't fail CI initially
        continue-on-error: true

  benchmarks:
    name: benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v20

      - name: Build development environment
        run: nix develop --accept-flake-config --command echo "Development environment ready"

      - name: Run benchmarks
        run: nix develop --accept-flake-config --command cargo bench --workspace --no-fail-fast
        continue-on-error: true # Don't fail CI on benchmark regression initially

      - name: Store benchmark result
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: target/criterion/
