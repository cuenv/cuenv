name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  lint-and-format:
    name: lint-and-format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v12
        with:
          name: devenv

      - name: Install devenv
        run: nix profile install --accept-flake-config nixpkgs#devenv

      - name: Build devenv
        run: devenv shell

      - name: Check formatting
        run: devenv shell -- treefmt --fail-on-change

      - name: Run clippy
        run: devenv shell -- cargo clippy --workspace --all-targets --all-features -- -D warnings

  test-suite:
    name: test-suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, 1.82.0] # MSRV - Edition 2024 requires 1.82+

    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
        if: matrix.os != 'windows-latest'

      - uses: cachix/cachix-action@v12
        with:
          name: devenv
        if: matrix.os != 'windows-latest'

      - name: Install devenv (Unix)
        run: nix profile install --accept-flake-config nixpkgs#devenv
        if: matrix.os != 'windows-latest'

      # Windows fallback - install tools directly
      - name: Install Rust (Windows)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
        if: matrix.os == 'windows-latest'

      - name: Install Go (Windows)
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"
        if: matrix.os == 'windows-latest'

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-git-

      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.rust }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-target-
            ${{ runner.os }}-target-

      - name: Build devenv (Unix)
        run: devenv shell
        if: matrix.os != 'windows-latest'

      - name: Build workspace (Unix)
        run: devenv shell -- cargo build --workspace --all-features
        if: matrix.os != 'windows-latest'

      - name: Build workspace (Windows)
        run: cargo build --workspace --all-features
        if: matrix.os == 'windows-latest'

      - name: Run tests (Unix)
        run: devenv shell -- cargo nextest run --workspace --all-features
        if: matrix.os != 'windows-latest'

      - name: Run tests (Windows)
        run: cargo test --workspace --all-features
        if: matrix.os == 'windows-latest'

      - name: Run doctests (Unix)
        run: devenv shell -- cargo test --doc --workspace
        if: matrix.os != 'windows-latest'

      - name: Run doctests (Windows)
        run: cargo test --doc --workspace
        if: matrix.os == 'windows-latest'

      # Go bridge tests disabled due to CGO issues in CI
      # - name: Test Go bridge (Unix)
      #   run: devenv shell -- bash -c "cd crates/cuengine && CGO_ENABLED=1 go test -v ./..."
      #   if: matrix.os != 'windows-latest'
      #   env:
      #     CGO_ENABLED: "1"

      - name: Test Go bridge (Windows)
        run: |
          cd crates/cuengine
          go test -v ./...
        if: matrix.os == 'windows-latest'

  security-audit:
    name: security-audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v12
        with:
          name: devenv

      - name: Install devenv
        run: nix profile install --accept-flake-config nixpkgs#devenv

      - name: Build devenv
        run: devenv shell

      - name: Run security audit
        run: devenv shell -- cargo audit

  coverage:
    name: coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v12
        with:
          name: devenv

      - name: Install devenv
        run: nix profile install --accept-flake-config nixpkgs#devenv

      - name: Build devenv
        run: devenv shell

      - name: Generate coverage
        run: devenv shell -- cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true

  benchmarks:
    name: benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v12
        with:
          name: devenv

      - name: Install devenv
        run: nix profile install --accept-flake-config nixpkgs#devenv

      - name: Build devenv
        run: devenv shell

      - name: Run benchmarks
        run: devenv shell -- cargo bench --workspace --no-fail-fast
        continue-on-error: true # Don't fail CI on benchmark regression initially

      - name: Store benchmark result
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: target/criterion/
